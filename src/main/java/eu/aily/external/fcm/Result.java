/*
 * Firebase Cloud Messaging
 * Send downstream messages to client apps
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package eu.aily.external.fcm;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Result
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-09-12T12:02:11.741+02:00")
public class Result {
  @SerializedName("message_id")
  private String messageId = null;

  @SerializedName("registration_id")
  private String registrationId = null;

  @SerializedName("error")
  private String error = null;

  public Result messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

   /**
   * Unique ID for each successfully processed message.
   * @return messageId
  **/
  @ApiModelProperty(value = "Unique ID for each successfully processed message.")
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }

  public Result registrationId(String registrationId) {
    this.registrationId = registrationId;
    return this;
  }

   /**
   * Canonical registration token for the client app that the message was processed and sent to. Sender should use this value as the registration token for future requests. Otherwise, the messages might be rejected.
   * @return registrationId
  **/
  @ApiModelProperty(value = "Canonical registration token for the client app that the message was processed and sent to. Sender should use this value as the registration token for future requests. Otherwise, the messages might be rejected.")
  public String getRegistrationId() {
    return registrationId;
  }

  public void setRegistrationId(String registrationId) {
    this.registrationId = registrationId;
  }

  public Result error(String error) {
    this.error = error;
    return this;
  }

   /**
   * Error that occurred when processing the message for the recipient. The possible values can be found in [table 9](https://firebase.google.com/docs/cloud-messaging/http-server-ref#table9).
   * @return error
  **/
  @ApiModelProperty(value = "Error that occurred when processing the message for the recipient. The possible values can be found in [table 9](https://firebase.google.com/docs/cloud-messaging/http-server-ref#table9).")
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Result result = (Result) o;
    return Objects.equals(this.messageId, result.messageId) &&
        Objects.equals(this.registrationId, result.registrationId) &&
        Objects.equals(this.error, result.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageId, registrationId, error);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Result {\n");
    
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    registrationId: ").append(toIndentedString(registrationId)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

