/*
 * Firebase Cloud Messaging
 * Send downstream messages to client apps
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package eu.aily.external.fcm;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Notification payload. For more information about notification message and data message options, see [Payload](https://firebase.google.com/docs/cloud-messaging/concept-options#notifications_and_data_messages). 
 */
@ApiModel(description = "Notification payload. For more information about notification message and data message options, see [Payload](https://firebase.google.com/docs/cloud-messaging/concept-options#notifications_and_data_messages). ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-09-12T12:02:11.741+02:00")
public class Notification {
  @SerializedName("title")
  private String title = null;

  @SerializedName("body")
  private String body = null;

  @SerializedName("icon")
  private String icon = null;

  @SerializedName("sound")
  private String sound = null;

  @SerializedName("badge")
  private String badge = null;

  @SerializedName("tag")
  private String tag = null;

  @SerializedName("color")
  private String color = null;

  @SerializedName("click_action")
  private String clickAction = null;

  @SerializedName("body_loc_key")
  private String bodyLocKey = null;

  @SerializedName("body_loc_args")
  private String bodyLocArgs = null;

  @SerializedName("title_loc_key")
  private String titleLocKey = null;

  @SerializedName("title_loc_args")
  private String titleLocArgs = null;

  public Notification title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Indicates notification title. This field is not visible on iOS phones and tablets. Field is required for android.
   * @return title
  **/
  @ApiModelProperty(value = "Indicates notification title. This field is not visible on iOS phones and tablets. Field is required for android.")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public Notification body(String body) {
    this.body = body;
    return this;
  }

   /**
   * Indicates notification body text.
   * @return body
  **/
  @ApiModelProperty(value = "Indicates notification body text.")
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public Notification icon(String icon) {
    this.icon = icon;
    return this;
  }

   /**
   * android: Indicates notification icon. Sets value to **myicon** for drawable resource **myicon**.
   * @return icon
  **/
  @ApiModelProperty(value = "android: Indicates notification icon. Sets value to **myicon** for drawable resource **myicon**.")
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }

  public Notification sound(String sound) {
    this.sound = sound;
    return this;
  }

   /**
   * Indicates a sound to play when the device receives a notification. * iOS: Sound files can be in the main bundle of the client app or in the Library/Sounds folder of the app&#39;s data container. See the [iOS Developer Library](https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW6) for more information). * android: Supports default or the filename of a sound resource bundled in the app. Sound files must reside in /res/raw/. 
   * @return sound
  **/
  @ApiModelProperty(value = "Indicates a sound to play when the device receives a notification. * iOS: Sound files can be in the main bundle of the client app or in the Library/Sounds folder of the app's data container. See the [iOS Developer Library](https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW6) for more information). * android: Supports default or the filename of a sound resource bundled in the app. Sound files must reside in /res/raw/. ")
  public String getSound() {
    return sound;
  }

  public void setSound(String sound) {
    this.sound = sound;
  }

  public Notification badge(String badge) {
    this.badge = badge;
    return this;
  }

   /**
   * iOS: Indicates the badge on the client app home icon.
   * @return badge
  **/
  @ApiModelProperty(value = "iOS: Indicates the badge on the client app home icon.")
  public String getBadge() {
    return badge;
  }

  public void setBadge(String badge) {
    this.badge = badge;
  }

  public Notification tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * android: Indicates whether each notification results in a new entry in the notification drawer. If not set, each request creates a new notification. If set, and a notification with the same tag is already being shown, the new notification replaces the existing one in the notification drawer. 
   * @return tag
  **/
  @ApiModelProperty(value = "android: Indicates whether each notification results in a new entry in the notification drawer. If not set, each request creates a new notification. If set, and a notification with the same tag is already being shown, the new notification replaces the existing one in the notification drawer. ")
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }

  public Notification color(String color) {
    this.color = color;
    return this;
  }

   /**
   * android: Indicates color of the icon, expressed in #rrggbb format
   * @return color
  **/
  @ApiModelProperty(value = "android: Indicates color of the icon, expressed in #rrggbb format")
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }

  public Notification clickAction(String clickAction) {
    this.clickAction = clickAction;
    return this;
  }

   /**
   * Indicates the action associated with a user click on the notification. * iOS:  Corresponds to category in the APNs payload. * android: When this is set, an activity with a matching intent filter is launched when user clicks the notification. 
   * @return clickAction
  **/
  @ApiModelProperty(value = "Indicates the action associated with a user click on the notification. * iOS:  Corresponds to category in the APNs payload. * android: When this is set, an activity with a matching intent filter is launched when user clicks the notification. ")
  public String getClickAction() {
    return clickAction;
  }

  public void setClickAction(String clickAction) {
    this.clickAction = clickAction;
  }

  public Notification bodyLocKey(String bodyLocKey) {
    this.bodyLocKey = bodyLocKey;
    return this;
  }

   /**
   * Indicates the key to the body string for localization. * iOS: Corresponds to \&quot;loc-key\&quot; in the APNs payload. * android: Use the key in the app&#39;s string resources when populating this value. 
   * @return bodyLocKey
  **/
  @ApiModelProperty(value = "Indicates the key to the body string for localization. * iOS: Corresponds to \"loc-key\" in the APNs payload. * android: Use the key in the app's string resources when populating this value. ")
  public String getBodyLocKey() {
    return bodyLocKey;
  }

  public void setBodyLocKey(String bodyLocKey) {
    this.bodyLocKey = bodyLocKey;
  }

  public Notification bodyLocArgs(String bodyLocArgs) {
    this.bodyLocArgs = bodyLocArgs;
    return this;
  }

   /**
   * Indicates the string value to replace format specifiers in the body string for localization. * iOS: Corresponds to \&quot;loc-args\&quot; in the APNs payload. * android:  See [Formatting and Styling](https://developer.android.com/guide/topics/resources/string-resource.html#FormattingAndStyling). 
   * @return bodyLocArgs
  **/
  @ApiModelProperty(value = "Indicates the string value to replace format specifiers in the body string for localization. * iOS: Corresponds to \"loc-args\" in the APNs payload. * android:  See [Formatting and Styling](https://developer.android.com/guide/topics/resources/string-resource.html#FormattingAndStyling). ")
  public String getBodyLocArgs() {
    return bodyLocArgs;
  }

  public void setBodyLocArgs(String bodyLocArgs) {
    this.bodyLocArgs = bodyLocArgs;
  }

  public Notification titleLocKey(String titleLocKey) {
    this.titleLocKey = titleLocKey;
    return this;
  }

   /**
   * Indicates the key to the title string for localization. * iOS: Corresponds to \&quot;title-loc-key\&quot; in the APNs payload. * android:  Use the key in the app&#39;s string resources when populating this value. 
   * @return titleLocKey
  **/
  @ApiModelProperty(value = "Indicates the key to the title string for localization. * iOS: Corresponds to \"title-loc-key\" in the APNs payload. * android:  Use the key in the app's string resources when populating this value. ")
  public String getTitleLocKey() {
    return titleLocKey;
  }

  public void setTitleLocKey(String titleLocKey) {
    this.titleLocKey = titleLocKey;
  }

  public Notification titleLocArgs(String titleLocArgs) {
    this.titleLocArgs = titleLocArgs;
    return this;
  }

   /**
   * Indicates the string value to replace format specifiers in the title string for localization. * iOS: Corresponds to \&quot;title-loc-args\&quot; in the APNs payload. * android: See [Formatting strings](https://developer.android.com/guide/topics/resources/string-resource.html#FormattingAndStyling). 
   * @return titleLocArgs
  **/
  @ApiModelProperty(value = "Indicates the string value to replace format specifiers in the title string for localization. * iOS: Corresponds to \"title-loc-args\" in the APNs payload. * android: See [Formatting strings](https://developer.android.com/guide/topics/resources/string-resource.html#FormattingAndStyling). ")
  public String getTitleLocArgs() {
    return titleLocArgs;
  }

  public void setTitleLocArgs(String titleLocArgs) {
    this.titleLocArgs = titleLocArgs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Notification notification = (Notification) o;
    return Objects.equals(this.title, notification.title) &&
        Objects.equals(this.body, notification.body) &&
        Objects.equals(this.icon, notification.icon) &&
        Objects.equals(this.sound, notification.sound) &&
        Objects.equals(this.badge, notification.badge) &&
        Objects.equals(this.tag, notification.tag) &&
        Objects.equals(this.color, notification.color) &&
        Objects.equals(this.clickAction, notification.clickAction) &&
        Objects.equals(this.bodyLocKey, notification.bodyLocKey) &&
        Objects.equals(this.bodyLocArgs, notification.bodyLocArgs) &&
        Objects.equals(this.titleLocKey, notification.titleLocKey) &&
        Objects.equals(this.titleLocArgs, notification.titleLocArgs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, body, icon, sound, badge, tag, color, clickAction, bodyLocKey, bodyLocArgs, titleLocKey, titleLocArgs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Notification {\n");
    
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    sound: ").append(toIndentedString(sound)).append("\n");
    sb.append("    badge: ").append(toIndentedString(badge)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    clickAction: ").append(toIndentedString(clickAction)).append("\n");
    sb.append("    bodyLocKey: ").append(toIndentedString(bodyLocKey)).append("\n");
    sb.append("    bodyLocArgs: ").append(toIndentedString(bodyLocArgs)).append("\n");
    sb.append("    titleLocKey: ").append(toIndentedString(titleLocKey)).append("\n");
    sb.append("    titleLocArgs: ").append(toIndentedString(titleLocArgs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

